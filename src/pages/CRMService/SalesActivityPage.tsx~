import React, {useEffect, useState} from "react";
import {
    DataGrid,
    GridColDef,
    GridRowSelectionModel, GridToolbar,
} from "@mui/x-data-grid";
import {
    Button, Dialog, DialogActions, DialogContent, DialogTitle,
    Grid,
    TextField

} from "@mui/material";

import {useDispatch} from "react-redux";
import {AppDispatch, useAppSelector} from "../../store";
import {
    fetchFindAllSalesActivity,
    fetchFindSalesActivityById,
    fetchSaveSalesActivity,
    fetchUpdateSalesActivity,
    fetchDeleteSalesActivity
} from "../../store/feature/crmSlice.tsx";
import {useTranslation} from "react-i18next";
import {useNavigate} from "react-router-dom";
import {DatePicker} from '@mui/x-date-pickers/DatePicker';
import {LocalizationProvider} from '@mui/x-date-pickers/LocalizationProvider';
import {AdapterDayjs} from '@mui/x-date-pickers/AdapterDayjs';
import Swal from "sweetalert2";
import dayjs, {Dayjs} from "dayjs";

const SalesActivityPage = () => {
    const [selectedRowIds, setSelectedRowIds] = useState<number[]>([]);
    const [searchText, setSearchText] = useState('');

    const dispatch = useDispatch<AppDispatch>();
    const salesActivities = useAppSelector((state) => state.crmSlice.salesActivityList);
    const [loading, setLoading] = useState(false);
    const [isActivating, setIsActivating] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);
    const [isUpdating, setIsUpdating] = useState(false);
    const navigate = useNavigate();

    const [openAddSalesActivityModal, setOpenAddSalesActivityModel] = useState(false);
    const [type, setType] = useState('');
    const [notes, setNotes] = useState('');
    const [date, setDate] = useState<Dayjs | null>(dayjs());

    const goToSalesActivitySavePage = () => {
        navigate("/sales-activity/save");
    }

    const [rowSelectionModel, setRowSelectionModel] = useState<GridRowSelectionModel>([]);
    const {t} = useTranslation();

    useEffect(() => {
        dispatch(fetchFindAllSalesActivity({
            page: 0,
            size: 100,
            searchText: searchText,
        }));
    }, [dispatch, searchText, loading, isActivating, isUpdating, isDeleting]);


    const handleRowSelection = (newSelectionModel: GridRowSelectionModel) => {
        setSelectedRowIds(newSelectionModel as number[]);
    }

    const handleOpenSalesActivityUpdateModal = async () => {
        setOpenAddSalesActivityModel(true);
        setIsUpdating(true);

        dispatch(fetchFindSalesActivityById(selectedRowIds[0])).then((data) => {
            setType(data.payload.data.type);
            setNotes(data.payload.data.notes);
            setDate(dayjs(data.payload.data.date));

        })
    }
    const handleUpdateSalesActivity = async () => {
        dispatch(fetchUpdateSalesActivity({
            id: selectedRowIds[0],
            type: type,
            notes: notes,
            date: date?.toDate() || new Date(),
        })).then(() => {
            setType('');
            setNotes('');
            setDate(dayjs());
            setOpenAddSalesActivityModel(false);
            Swal.fire({
                title: t("swal.success"),
                text: t("crmService.updated_sales_activity"),
                icon: "success",
            })
            setIsUpdating(false);
        }).catch((error) => {
            setOpenAddSalesActivityModel(false);
            setIsUpdating(false);
            Swal.fire({
                title: t("swal.error"),
                text: t("crmService.error-occurred"),
                icon: "error",
            })
        })

    }

    const handleDeleteSalesActivity = async () => {
        if (selectedRowIds.length === 0) return;

        setIsDeleting(true);
        try {
            const result = await Swal.fire({
                title: t("swal.areyousure"),
                text: t("crmService.deleting"),
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: t("crmService.delete"),
                cancelButtonText: t("crmService.cancel"),
                html: `<input type="checkbox" id="confirm-checkbox" />
                   <label for="confirm-checkbox">${t("crmService.confirmDelete")}</label>`,
                preConfirm: () => {
                    const popup = Swal.getPopup();
                    if (popup) {
                        const checkbox = popup.querySelector('#confirm-checkbox') as HTMLInputElement;
                        if (checkbox && !checkbox.checked) {
                            Swal.showValidationMessage(t("crmService.checkboxRequired"));
                            return false;
                        }
                        return true;
                    }
                }
            });

            if (result.isConfirmed) {
                let hasError = false;
                for (const id of selectedRowIds) {
                    const selectedSalesActivity = salesActivities.find((salesActivity) => salesActivity.id === id);
                    if (!selectedSalesActivity) continue;

                    const data = await dispatch(fetchDeleteSalesActivity(selectedSalesActivity.id));

                    if (data.payload.message !== "Success") {
                        await Swal.fire({
                            title: t("swal.error"),
                            text: t("crmService.error-occurred"),
                            icon: "error",
                        });
                        hasError = true;
                        break;
                    }
                }

                if (!hasError) {
                    await Swal.fire({
                        title: t("swal.success"),
                        text: t("crmService.deleted-sales-activity"),
                        icon: "success",
                    });
                    setSelectedRowIds([]);
                }
            }
        } catch
            (error) {
            localStorage.removeItem("token");
        } finally {

            setIsDeleting(false);
        }
    }


    const columns: GridColDef[] = [

        {field: "type", headerName: t("crmService.type"), flex: 1.5, headerAlign: "center"},
        {field: "date", headerName: t("crmService.date"), flex: 1.5, headerAlign: "center"},
        {field: "notes", headerName: t("crmService.notes"), flex: 1.5, headerAlign: "center"},
        {field: "status", headerName: t("crmService.status"), headerAlign: "center", flex: 1},

    ];


    return (
        <LocalizationProvider dateAdapter={AdapterDayjs}>
            <div style={{height: "auto"}}>

                <TextField
                    label={t("crmService.search-by-type")}
                    variant="outlined"
                    onChange={(event) => {
                        setSearchText(event.target.value);
                    }}
                    value={searchText}
                    style={{marginBottom: "1%", marginTop: "1%"}}
                    fullWidth
                    inputProps={{maxLength: 50}}
                />

                <DataGrid
                    slots={{
                        toolbar: GridToolbar,
                    }}
                    rows={salesActivities}
                    columns={columns}
                    initialState={{
                        pagination: {
                            paginationModel: {page: 1, pageSize: 5},
                        }
                    }}
                    // getRowClassName={(params)=>
                    //     params.row.isExpenditureApproved
                    //         ? "approved-row"
                    //         : "unapproved-row"
                    // }
                    pageSizeOptions={[5, 10]}
                    checkboxSelection
                    onRowSelectionModelChange={handleRowSelection}
                    autoHeight={true}
                    sx={{
                        "& .MuiDataGrid-columnHeaders": {
                            backgroundColor: "rgba(224, 224, 224, 1)",
                        },
                        "& .MuiDataGrid-columnHeaderTitle": {
                            textAlign: "center",
                            fontWeight: "bold",
                        },
                        "& .MuiDataGrid-cell": {
                            textAlign: "center",
                        },
                        // "& .approved-row": {
                        //     backgroundColor: "rgba(77, 148, 255,1)",

                        // },
                        // "& .unapproved-row": {
                        //     backgroundColor: "rgba(242, 242, 242,1)",
                        // },

                    }}
                    rowSelectionModel={selectedRowIds}
                />
                <Grid container spacing={2} sx={{
                    flexGrow: 1,
                    justifyContent: 'flex-start',
                    alignItems: 'stretch',
                    marginTop: '2%',
                    marginBottom: '2%'
                }}>
                    <Grid item xs={12} sm={6} md={3} lg={2}>
                        <Button
                            onClick={goToSalesActivitySavePage}
                            variant="contained"
                            color="success"
                            //startIcon={<ApproveIcon />}
                            sx={{
                                width: '100%',
                                height: '100%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            }}
                        >
                            {t("crmService.make-sales-activity")}
                        </Button>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3} lg={2}>
                        <Button
                            onClick={handleOpenSalesActivityUpdateModal}
                            variant="contained"
                            color="primary"

                            disabled={selectedRowIds.length > 1 || selectedRowIds.length === 0}
                            sx={{
                                width: '100%',
                                height: '100%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            }}
                        >
                            {t("crmService.update")}
                        </Button>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3} lg={2}>
                        <Button
                            onClick={handleDeleteSalesActivity}
                            variant="contained"
                            color="error"
                            disabled={isDeleting || selectedRowIds.length === 0}
                            //startIcon={<CancelIcon/>}
                            sx={{
                                width: '100%',
                                height: '100%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            }}
                        >
                            {t("crmService.delete")}
                        </Button>
                    </Grid>
                    <Dialog open={openAddSalesActivityModal} onClose={() => setOpenAddSalesActivityModel(false)}
                            fullWidth
                            maxWidth='lg'>
                        <DialogTitle>{isUpdating ? t('crmService.update') : t('crmService.add_sales_activity')}</DialogTitle>
                        <DialogContent>
                            <TextField
                                sx={{marginTop: '15px'}}
                                label={t('crmService.type')}
                                name="type"
                                onChange={e => setType(e.target.value)}
                                required
                                fullWidth
                            />
                            <DatePicker
                                label={t('crmService.date')}
                                value={date}
                                onChange={(newDate) => setDate(newDate)}
                                sx={{marginTop: '15px'}}

                            />
                            <TextField
                                sx={{marginTop: '15px'}}
                                label={t('crmService.notes')}
                                name="notes"
                                value={notes}
                                onChange={e => setNotes(e.target.value)}
                                required
                                fullWidth
                            />
                        </DialogContent>
                        <DialogActions>
                            <Button onClick={() => {
                                setOpenAddSalesActivityModel(false);
                                setIsUpdating(false);
                                setType('');
                                setDate(dayjs());
                                setNotes('');

                            }} color="error" variant="contained">{t('crmService.cancel')}</Button>
                            {
                                <Button onClick={() => handleUpdateSalesActivity()} color="success"
                                        variant="contained"
                                        disabled={type === '' || date === null || notes === ''}>{t('crmService.update')}</Button>}
                        </DialogActions>
                    </Dialog>
                </Grid>


            </div>
        </LocalizationProvider>
    );

}
export default SalesActivityPage;